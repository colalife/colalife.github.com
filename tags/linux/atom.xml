<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: linux | 超群的博客]]></title>
  <link href="http://colalife.com/tags/linux/atom.xml" rel="self"/>
  <link href="http://colalife.com/"/>
  <updated>2014-02-10T13:37:03+08:00</updated>
  <id>http://colalife.com/</id>
  <author>
    <name><![CDATA[wang chaoqun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mongodb, mysql导出备份至ftp]]></title>
    <link href="http://colalife.com/blog/2013/11/mongodb-he-mysql-dao-chu-bei-fen-bing-shang-chuan-zhi-ftp.html/"/>
    <updated>2013-11-03T17:10:32+08:00</updated>
    <id>http://colalife.com/blog/2013/11/mongodb-he-mysql-dao-chu-bei-fen-bing-shang-chuan-zhi-ftp</id>
    <content type="html"><![CDATA[<p>前提是mongodb和mysql已经安装使用，先安装vsftp，配置完成后，在编写shell脚本，使用计划任务执行<br/>
1. 安装vsftp<br/>
<code>
rpm -q vsftpd
yum -y install vsftpd
</code></p>

<!--more-->


<p>设置开机启动<br/>
<code>
chkconfig vsftpd on
</code>
启动vsftpd服务 <br/>
<code>
service vsftpd start
</code>
增加新用户ftpuser，设置权限和密码<br/>
<code>
useradd -d /home/ftpuser -s /sbin/nologin ftpuser
chown -R ftpuser /home/ftpuser
chmod 777 -R /home/ftpuser
passwd ftpuser
</code>
配置vsftp
<code>
vi /etc/vsftpd/vsftpd.conf
</code>
内容删掉换成以下
<code>
anonymous_enable=NO
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_std_format=YES
chroot_list_enable=YES
chroot_list_file=/etc/vsftpd/chroot_list
listen=YES
pam_service_name=vsftpd
userlist_enable=YES
tcp_wrappers=YES
pasv_min_port=10000
pasv_max_port=10030
</code>
添加chroot_list文件
<code>
vi /etc/vsftpd/chroot_list
</code>
内容<code>ftpuser</code><br/>
重启服务<code>service vsftpd restart</code><br/>
防火墙开放21端口
<code>
service iptables stop
vi /etc/sysconfig/iptables
</code>
添加
<code>
-A INPUT -m state --state NEW -m tcp -p tcp --dport 21 -j ACCEPT
</code><br/>
重启防火墙服务
<code>
service iptables start
</code><br/>
解决用户无法进入目录问题，终端执行：<br/>
<code>
setsebool -P ftp_home_dir 1
</code><br/>
然后重启FTP服务：
<code>
service vsftpd restart
</code></p>

<h2>2. mongodb导出、压缩、上传脚本，删除过期文件  </h2>

<p>先定义好服务器、数据库、各目录、用户名、密码</p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>MONGO_HOST=&ldquo;127.0.0.1:27017&rdquo;
MONGO_DB=&ldquo;mydbname&rdquo;
MONGO_DUMP=&ldquo;/usr/local/mongo/bin/mongodump&rdquo;
MONGO_BACKUP=&ldquo;/usr/local/mongo/backup&rdquo;
NEW_TIMESTAMP=$(date +%F-%H%M)
OLD_TIMESTAMP=$(date -d &lsquo;-5 days&rsquo; &ldquo;+%F-%H%M&rdquo;)
NEW_BACKUP_FILE=&ldquo;$MONGO_DB.$NEW_TIMESTAMP.tar.gz&rdquo;
OLD_BACKUP_FILE=&ldquo;$MONGO_DB.$OLD_TIMESTAMP.tar.gz&rdquo;</p>

<h1>0.temp dir</h1>

<p>if [ ! -d $MONGO_BACKUP/$MONGO_DB.$NEW_TIMESTAMP ]
then
 mkdir $MONGO_BACKUP/$MONGO_DB.$NEW_TIMESTAMP
fi</p>

<h1>1.mongodump then delete old dir and file</h1>

<p>$MONGO_DUMP -h $MONGO_HOST -d $MONGO_DB -o $MONGO_BACKUP/$MONGO_DB.$NEW_TIMESTAMP
cd $MONGO_BACKUP/$MONGO_DB.$NEW_TIMESTAMP &amp;&amp; tar -zcf $MONGO_BACKUP/$NEW_BACKUP_FILE */
rm -rf $MONGO_BACKUP/$MONGO_DB.$NEW_TIMESTAMP
rm -rf $MONGO_BACKUP/$OLD_BACKUP_FILE</p>

<h1>2.upload new and delte old files</h1>

<h1>!/bin/sh</h1>

<p>FTP_HOST=&ldquo;192.168.100.119&rdquo;
FTP_PORT=&ldquo;21&rdquo;
FTP_USER=&ldquo;ftpuser&rdquo;
FTP_PSWD=&ldquo;123456&rdquo;
FTP_DIR=&ldquo;mongo-backup&rdquo;</p>

<p>ftp -nv &lt;&lt;!
open $FTP_HOST $FTP_PORT
user $FTP_USER $FTP_PSWD
binary
prompt
cd $FTP_DIR
mdelete $OLD_BACKUP_FILE
lcd $MONGO_BACKUP
mput $NEW_BACKUP_FILE
close
bye
!
echo &ldquo;============== $MONGO_DB backup ends at $NEW_TIMESTAMP ==============&rdquo;
```</p>

<h2>3. mysql导出、压缩、上传脚本  </h2>

<p>```</p>

<h1>! /bin/bash</h1>

<p>MYSQL_HOST=&ldquo;192.168.100.119&rdquo;
MYSQL_PORT=&lsquo;3306&rsquo;
MYSQL_USER=&lsquo;myuser&rsquo;
MYSQL_PSWD=&lsquo;mypass&rsquo;
MYSQL_DB=&lsquo;mydbname&rsquo;
MYSQL_DUMP=&ldquo;/usr/bin/mysqldump&rdquo;
MYSQL_BACKUP=&ldquo;/usr/local/mysql/backup&rdquo;
NEW_TIMESTAMP=$(date +%F-%H%M)
OLD_TIMESTAMP=$(date -d &lsquo;-5 days&rsquo; &ldquo;+%F-%H%M&rdquo;)
GZIP=&ldquo;$(which gzip)&rdquo;</p>

<h1>1.mysql dump and delete old files</h1>

<p>$MYSQL_DUMP -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PSWD $MYSQL_DB | $GZIP -9 > $MYSQL_BACKUP/$MYSQL_DB.$NEW_TIMESTAMP.gz
rm -rf $MYSQL_BACKUP/$MYSQL_DB.$OLD_TIMESTAMP.gz
echo &ldquo;============== mysqldump ends at $NEW_TIMESTAMP ==============&rdquo;</p>

<h1>2.upload new and delete old files</h1>

<p>FTP_HOST=&ldquo;192.168.100.119&rdquo;
FTP_PORT=&ldquo;21&rdquo;
FTP_USER=&ldquo;ftpuser&rdquo;
FTP_PSWD=&ldquo;123456&rdquo;
FTP_DIR=&ldquo;mysql-backup&rdquo;</p>

<p>ftp -nv &lt;&lt;!
open $FTP_HOST $FTP_PORT
user $FTP_USER $FTP_PSWD
binary
prompt
cd $FTP_DIR
lcd $MYSQL_BACKUP
mput $MYSQL_DB.$NEW_TIMESTAMP.gz
mdelete $MYSQL_DB.$OLD_TIMESTAMP.gz
close
bye
!
echo &ldquo;============== mysql upload ends at $NEW_TIMESTAMP ==============&rdquo;
```</p>

<h2>4. 添加计划任务</h2>

<p>```
crontab -e</p>

<h1>every day at 00m</h1>

<p>00 * * * * /bin/bash /usr/local/mongo/cmd/mongo_backup.sh
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cygwin & Wine & Ruby 记录]]></title>
    <link href="http://colalife.com/blog/2013/01/cygwin-and-wine-and-ruby-ji-lu.html/"/>
    <updated>2013-01-16T16:03:36+08:00</updated>
    <id>http://colalife.com/blog/2013/01/cygwin-and-wine-and-ruby-ji-lu</id>
    <content type="html"><![CDATA[<p>cygwin是一个在windows平台上运行的unix模拟环境, wine则可以安装在Linux，再对应到Windows相应的函数来调用DLL以运行Windows程序。这两个就是利器，windows下不想用虚拟机（占用资源还挺多）或双系统，就可以用用cygwin；服务器上想搞点exe的东西就安装个wine。至于ruby，是因为octopress要用，开个虚拟机写博客很不爽，windows下折腾安装配置，却中文编码没解决，还是cygwin搞定。<!--more--></p>

<h2>cygwin的安装</h2>

<p>官网下载setup-x86_64.exe，运行，下一步，到download site选第一个163的镜像，速度快些；下一步到select packages页面，不选不点，直接下一步，会下载安装默认配置的相关包；安装完默认，重新运行setup，选择要用的包，比如下面这些基本需要：
<a href="http://blog.developwithpassion.com/2012/03/30/installing-rvm-with-cygwin-on-windows/">摘录自blog.developwithpassion.com</a><br/>
```
Archive</p>

<pre><code>unzip – Unzipping zip files  
</code></pre>

<p>Net</p>

<pre><code>openssl – bin and sources
openssh – Only if you are not going to compile openssh yourself
curl – download internet resources
</code></pre>

<p>Devl</p>

<pre><code>colorgcc
gcc
gcc-core – compiler
git
git-completion
git-gui
git-svn
gitk
libtool – Shared library generation tool. You’ll need it when trying to compile rubies
libncurses-devel – Used when compiling several other tools I use
make
mercurial
openssl-devel – Required for compiling openssh (not necessarily required for rvm, but I always install it to compile openssh myself)
readline
Libs
zlib
zlib-devel
</code></pre>

<p>Utils</p>

<pre><code>ncurses – Enabling better handling of terminal
patch – Apply a diff file to an original.
</code></pre>

<p>```</p>

<h2>wine的安装，centos6.x</h2>

<p><code>
wget http://mirrors.sohu.com/fedora-epel/6/i386/epel-release-6-8.noarch.rpm
rpm -ivh epel-release-6-8.noarch.rpm
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6
yum makecache
yum install wine
</code>
安装完成后，应用程序（application）->wine->wine configure稍作配置，也可能会提示download gecko，install 完成即可
把windows/system32下的MFC42.dll   msxml.dll    msvcp60.dll   riched20.dll    riched32.dll 这几个文件复制到 ~/.wine/drive_c/windows/system32里，再输入命令：winecfg<br/>
安装exe，英文系统会有中文乱码情况
<code>
wine whatever.exe
</code></p>

<h2>安装Ruby</h2>

<p>我虚拟了两个centos，一个用make install安装并配置octopress环境，另一个同样方法却不成功，后来用rvm可行，不用yum install ruby 是因为版本过低。</p>

<h4>RVM安装：</h4>

<p><code>
curl -L https://get.rvm.io | bash -s stable --ruby
</code>
<code>
ruby --version
</code>显示版本即成功</p>

<h4>make install：</h4>

<p><code>
wget ftp://ftp.ruby-lang.org//pub/ruby/2.1/ruby-2.1.0.tar.gz
tar -zxvf ruby-2.1.0.tar.gz
cd ruby-2.1.0
./configure --prefix=/usr/local/ruby
make
make test
make install  
</code></p>

<h4>windows7下简直是个悲剧：</h4>

<p>下载rubyinstaller安装，devkit解压，然后cmd下
cdd到DevKit path<br/>
<code>
ruby dk.rb init
ruby dk.rb review
ruby dk.rb install
</code>
出现utf-8错误，使用chcp 1252，再进行上三句，done<br/>
然后配置octopress环境，英文下rake成功，有中文（比如文章分类、标签带中文的）不成;<br/>
<a href="http://txgcwm.github.io/">摘录自txgcwm.github.io</a></p>

<blockquote><p>在实际使用（rake generate/rake preview）的时候，若blog整体采用了非ascii码的编码格式（比如utf-8）就会出现类似这样的错误：<br/>
Liquid error: incompatible encoding regexp match (ascii-8bit regexp with utf-8 string)<br/>
其实是由于插件文件plugins/category_list_tag.rb本身是ascii编码所致:
<code>
$ chardet category_list_tag.rb
category_list_tag.rb: ascii (confidence: 1.00)
</code>
category_list_tag.rb中很多地方用到了ruby的正则表达式，而ruby的正则表达式在匹配的时候，默认是按照“代码源文件”的编码格式(在这里是ascii)进行匹配的，而如果blog是utf-8编码的话就会出现上述错误。有两种解决办法：
1. 将category_list_tag.rb转成utf-8格式。<br/>
2. 更改category_list_tag.rb中所有的正则表达式声明，加上u选项（u的意思就是以utf-8编码格式来进行匹配）。例如，若原正则表达式是/regexp/, 则改成/regexp/u。</p></blockquote>
]]></content>
  </entry>
  
</feed>
